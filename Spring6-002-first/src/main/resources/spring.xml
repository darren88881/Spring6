<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="user" class="com.powernode.spring6.bean.User"></bean>
    <bean id="userDao" class="com.powernode.spring6.dao.UserDao"></bean>
    <bean id="orderDao" class="com.powernode.spring6.dao.OrderDao"></bean>
    <!--set注入-->
    <bean id="userService1" class="com.powernode.spring6.service.UserService">
        <property name="userDao" ref="userDao"></property>
        <property name="orderDao" ref="orderDao"></property>
    </bean>
    <!--构造器注入-->
    <bean id="userService2" class="com.powernode.spring6.service.UserService">
        <constructor-arg index="0" ref="userDao"></constructor-arg>
        <constructor-arg index="1" ref="orderDao"></constructor-arg>
    </bean>

    <!--P命名空间和C命名空间注入-->
    <bean id="dogBlack" class="com.powernode.spring6.bean.Dog" p:name="小黑" p:age="3"></bean>
    <bean id="dogFlower" class="com.powernode.spring6.bean.Dog" c:name="小花" c:age="4"></bean>

    <!--autowire 自动装配-->
    <bean id="userService3" class="com.powernode.spring6.service.UserService" autowire="byName"/>
    <bean id="userService4" class="com.powernode.spring6.service.UserService" autowire="byType"/>

    <!--引入外部属性文件-->
    <context:property-placeholder location="dog.properties"/>
    <bean id="dogWolf" class="com.powernode.spring6.bean.Dog">
        <property name="name" value="${name}"></property>
        <property name="age" value="${age}"></property>
    </bean>

    <!--
        scope:
            singleton	在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，bean作用域范围的默认值。
            prototype	每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()。
            request——每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring WebApplicationContext环境。
            session——同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring WebApplicationContext环境。
            application——限定一个Bean的作用域为ServletContext的生命周期。该作用域仅适用于web的Spring WebApplicationContext环境。

    -->
    <bean id="student1" class="com.powernode.spring6.scope.Student" scope="singleton"></bean>
    <bean id="student2" class="com.powernode.spring6.scope.Student" scope="singleton"></bean>

    <!--自定义作用域-->
    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="myThread">
                    <bean class="org.springframework.context.support.SimpleThreadScope"/>
                </entry>
            </map>
        </property>
    </bean>
    <bean id="student3" class="com.powernode.spring6.scope.Student" scope="myThread"></bean>

</beans>
